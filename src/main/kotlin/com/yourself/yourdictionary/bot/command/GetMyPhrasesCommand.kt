package com.yourself.yourdictionary.bot.command

import com.yourself.yourdictionary.service.PhraseService
import org.springframework.data.domain.PageRequest
import org.springframework.data.domain.Sort
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.objects.Update


@Component
class GetMyPhrasesCommand(
    private val phraseService: PhraseService
) : BotCommand {

    override fun supports(text: String): Boolean {
        return text.equals("/phrases", ignoreCase = true)
    }

    override fun getDescription(): String = "/phrases ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑"

    override fun handle(update: Update): String {
        return try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ—Ä–∞–∑, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ —Ç–∞–∫–æ–µ)
            val phrasesPage = phraseService.getAll(
                PageRequest.of(0, 10, Sort.by(Sort.Direction.DESC, "createdAt"))
            )

            if (phrasesPage.isEmpty) {
                "‚ùï –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑."
            } else {
                buildString {
                    append("üìö –¢–≤–æ–∏ —Ñ—Ä–∞–∑—ã:\n\n")
                    phrasesPage.forEach { phrase ->
                        append("‚Ä¢ ${phrase.englishText ?: "???"}\n")
                        phrase.translations.forEach {
                            append("   - ${it.language}: ${it.translatedText}\n")
                        }
                        if (!phrase.note.isNullOrBlank()) {
                            append("   üí¨ ${phrase.note}\n")
                        }
                        append("\n")
                    }
                }
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ—Ä–∞–∑: ${e.message}"
        }
    }
}